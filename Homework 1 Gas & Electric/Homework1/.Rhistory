summary_2x2 <-
sf_pums_clean %>%
mutate(
leadrisk = ifelse(
leadrisk == 1,
"Yes (Lead risk)",
"No (No lead risk)"
),
predicted_leadrisk = ifelse(
predicted_score >= .1,
as.numeric(WGTP),
0
),
predicted_noleadrisk = ifelse(
predicted_score < .1,
as.numeric(WGTP),
0
)
) %>%
group_by(leadrisk) %>%
summarize(
predicted_leadrisk = sum(predicted_leadrisk),
predicted_noleadrisk = sum(predicted_noleadrisk)
)
# pull(leadrisk) %>%
# table(predicted_score > 0.1)
summary_2x2
sample_predict <- sample_n(sf_pums_clean, 1)
predict(logit_survey_model, sample_predict, type = "response")
predicted_score <-
predict(logit_survey_model, sf_pums_clean, type = "response")
cbind(sf_pums_clean, predicted_score)
data <- sf_pums_clean %>%
left_join(pums_wgtp_2019_1yr, by = c("SERIALNO")) %>%
select(
starts_with("WGTP")
) %>%
select(-WGTP.x,-WGTP.y)
logit_survey_design <- svrepdesign(
data = sf_pums_clean,
type = "ACS",
repweights = data,
weights = ~as.numeric(WGTP)
)
logit_survey_model <- svyglm(
formula = leadrisk~ + BLD + TEN  + MV + PUMA,
family = quasibinomial(),
design = logit_survey_design
)
summary(logit_survey_model)
sample_predict <- sample_n(sf_pums_clean, 1)
predict(logit_survey_model, sample_predict, type = "response")
predicted_score <-
predict(logit_survey_model, sf_pums_clean, type = "response")
cbind(sf_pums_clean, predicted_score)
summary_2x2 <-
sf_pums_clean %>%
mutate(
leadrisk = ifelse(
leadrisk == 1,
"Yes (Lead risk)",
"No (No lead risk)"
),
predicted_leadrisk = ifelse(
predicted_score >= .1,
as.numeric(WGTP),
0
),
predicted_noleadrisk = ifelse(
predicted_score < .1,
as.numeric(WGTP),
0
)
) %>%
group_by(leadrisk) %>%
summarize(
predicted_leadrisk = sum(predicted_leadrisk),
predicted_noleadrisk = sum(predicted_noleadrisk)
)
# pull(leadrisk) %>%
# table(predicted_score > 0.1)
summary_2x2
summary_2x2 <-
sf_pums_clean %>%
mutate(
leadrisk = ifelse(
leadrisk == 1,
"Yes (Lead risk)",
"No (No lead risk)"
),
predicted_leadrisk = ifelse(
predicted_score >= .1,
as.numeric(WGTP),
0
),
predicted_noleadrisk = ifelse(
predicted_score < .1,
as.numeric(WGTP),
0
)
) %>%
group_by(leadrisk) %>%
summarize(
predicted_leadrisk = sum(predicted_leadrisk),
predicted_noleadrisk = sum(predicted_noleadrisk)
)
summary_2x2
logit_model <- glm(
leadrisk ~  BLD + TEN  + MV + PUMA,
family = quasibinomial(),
data = sf_pums_clean
)
summary(logit_model)
knitr::opts_chunk$set(echo = F, warning = F, message = F)
library(tidyverse)
library(sf)
library(tigris)
library(mapview)
library(leaflet)
library(survey)
library(censusapi)
Sys.setenv(CENSUS_KEY="9fbd5ddd430b595b8f3715733cae2b75c18be92e")
# pums_2019_1yr <- getCensus(
#   name = "acs/acs1/pums",
#   vintage = 2019,
#   region = "public use microdata area:*",
#   regionin = "state:06",
#   vars = c(
#     "SERIALNO",
#     "SPORDER",
#     "PWGTP",
#     "WGTP",
#     "YBL",
#     "BLD",
#     "TEN",
#     "MV",
#     "HINCP",
#     "AGEP"
#   )
# )
saveRDS(pums_2019_1yr, "a6_pums.rds")
pums_2019_1yr <- readRDS("a6_pums.rds")
ca_pumas <-
pumas("CA", cb = T, progress_bar = F)
sf_boundary <-
counties("CA", cb = T, progress_bar = F) %>%
filter(NAME == "San Francisco")
sf_pumas <-
ca_pumas %>%
st_centroid() %>%
.[sf_boundary, ] %>%
st_drop_geometry() %>%
left_join(ca_pumas %>% select(GEOID10)) %>%
st_as_sf()
sf_pums <- pums_2019_1yr %>%
mutate(
PUMA = str_pad(public_use_microdata_area,5,"left","0")
) %>%
filter(PUMA %in% sf_pumas$PUMACE10)
sf_pums_clean <- sf_pums %>%
mutate(
YBL = as.numeric(YBL),
) %>%
filter(YBL %in% 1:3) %>%
arrange(as.numeric(AGEP)) %>%
group_by(SERIALNO) %>%
summarize_all(first) %>%
mutate(
AGEP = as.numeric(AGEP),
HINCP = as.numeric(HINCP),
leadrisk = ifelse(
as.numeric(HINCP) <= 90000 &
as.numeric(AGEP) <= 6,
1,
0
)) %>%
mutate(across(
c(BLD, TEN, YBL, WGTP, MV, HINCP, PUMA),
factor))
logit_model <- glm(
leadrisk ~  BLD + TEN  + MV + PUMA,
family = quasibinomial(),
data = sf_pums_clean
)
summary(logit_model)
temp <- tempfile()
download.file("https://www2.census.gov/programs-surveys/acs/data/pums/2019/1-Year/csv_hca.zip",destfile = temp)
pums_wgtp_2019_1yr <- read_csv(unzip(temp,"psam_h06.csv"))
unlink(temp)
data <- sf_pums_clean %>%
left_join(pums_wgtp_2019_1yr, by = c("SERIALNO")) %>%
select(
starts_with("WGTP")
) %>%
select(-WGTP.x,-WGTP.y)
logit_survey_design <- svrepdesign(
data = sf_pums_clean,
type = "ACS",
repweights = data,
weights = ~as.numeric(WGTP)
)
logit_survey_model <- svyglm(
formula = leadrisk~ + BLD + TEN  + MV + PUMA,
family = quasibinomial(),
design = logit_survey_design
)
summary(logit_survey_model)
sample_predict <- sample_n(sf_pums_clean, 1)
predict(logit_survey_model, sample_predict, type = "response")
predicted_score <-
predict(logit_survey_model, sf_pums_clean, type = "response")
cbind(sf_pums_clean, predicted_score)
summary_2x2 <-
sf_pums_clean %>%
mutate(
leadrisk = ifelse(
leadrisk == 1,
"Yes (Lead risk)",
"No (No lead risk)"
),
predicted_leadrisk = ifelse(
predicted_score >= .1,
as.numeric(WGTP),
0
),
predicted_noleadrisk = ifelse(
predicted_score < .1,
as.numeric(WGTP),
0
)
) %>%
group_by(leadrisk) %>%
summarize(
predicted_leadrisk = sum(predicted_leadrisk),
predicted_noleadrisk = sum(predicted_noleadrisk)
)
summary_2x2
knitr::opts_chunk$set(echo = F, warning = F, message = F)
knitr::opts_chunk$set(echo = F, warning = F, message = F)
library(tigris)
library(tidyverse)
library(sf)
library(mapview)
library(leaflet)
library(censusapi)
knitr::opts_chunk$set(echo = F, warning = F, message = F)
years <- 2017:2021
quarters <- 1:4
types <- c("Electric","Gas")
pge_data_raw <- NULL
for(year in years){
for(quarter in quarters){
for(type in types){
filename <-
paste0(
"PGE_",
year,
"_Q",
quarter,
"_",
type,
"UsageByZip.csv"
)
if(!file.exists(filename)) next
temp <- read_csv(filename)
if(type == "Electric"){
temp<-
temp%>%
#conversion: 1 kWH = 3.41213 kBTU
mutate(TOTALKBTU =  TOTALKWH*3.41214)%>%
select(-TOTALKWH, -AVERAGEKWH)
}
if(type == "Gas") {
temp <-
temp %>%
#conversion: 1 Therm = 99.9761 kBTU
mutate(TOTALKBTU = TOTALTHM * 99.9761) %>%
select(-TOTALTHM, -AVERAGETHM)
}
pge_data_raw <-
rbind(pge_data_raw,temp)
}
}
}
pge_data <-
pge_data_raw %>%
filter(
CUSTOMERCLASS %in% c("Elec- Residential","Gas- Residential","Elec- Commercial","Gas- Commercial")
) %>%
group_by(
YEAR,
MONTH,
CUSTOMERCLASS
) %>%
summarize(
TOTALKBTU = sum(TOTALKBTU, na.rm = T)
) %>%
mutate(
DATE =
paste(
YEAR,
MONTH,
"01",
sep="-"
) %>% as.Date()
)
years <- 2017:2021
quarters <- 1:4
types <- c("Electric","Gas")
pge_data_raw <- NULL
for(year in years){
for(quarter in quarters){
for(type in types){
filename <-
paste0(
"PGE_",
year,
"_Q",
quarter,
"_",
type,
"UsageByZip.csv"
)
if(!file.exists(filename)) next
temp <- read_csv(filename)
if(type == "Electric"){
temp<-
temp%>%
#conversion: 1 kWH = 3.41213 kBTU
mutate(TOTALKBTU =  TOTALKWH*3.41214)%>%
select(-TOTALKWH, -AVERAGEKWH)
}
if(type == "Gas") {
temp <-
temp %>%
#conversion: 1 Therm = 99.9761 kBTU
mutate(TOTALKBTU = TOTALTHM * 99.9761) %>%
select(-TOTALTHM, -AVERAGETHM)
}
pge_data_raw <-
rbind(pge_data_raw,temp)
}
}
}
pge_data <-
pge_data_raw %>%
filter(
CUSTOMERCLASS %in% c("Elec- Residential","Gas- Residential","Elec- Commercial","Gas- Commercial")
) %>%
group_by(
YEAR,
MONTH,
CUSTOMERCLASS
) %>%
summarize(
TOTALKBTU = sum(TOTALKBTU, na.rm = T)
) %>%
mutate(
DATE =
paste(
YEAR,
MONTH,
"01",
sep="-"
) %>% as.Date()
)
years <- 2017:2021
quarters <- 1:4
types <- c("Electric","Gas")
pge_data_raw <- NULL
for(year in years){
for(quarter in quarters){
for(type in types){
filename <-
paste0(
"PGE_",
year,
"_Q",
quarter,
"_",
type,
"UsageByZip.csv"
)
if(!file.exists(filename)) next
temp <- read_csv(filename)
if(type == "Electric"){
temp<-
temp%>%
#conversion: 1 kWH = 3.41213 kBTU
mutate(TOTALKBTU =  TOTALKWH*3.41214)%>%
select(-TOTALKWH, -AVERAGEKWH)
}
if(type == "Gas") {
temp <-
temp %>%
#conversion: 1 Therm = 99.9761 kBTU
mutate(TOTALKBTU = TOTALTHM * 99.9761) %>%
select(-TOTALTHM, -AVERAGETHM)
}
pge_data_raw <-
rbind(pge_data_raw,temp)
}
}
}
pge_data <-
pge_data_raw %>%
filter(
CUSTOMERCLASS %in% c("Elec- Residential","Gas- Residential","Elec- Commercial","Gas- Commercial")
) %>%
group_by(
YEAR,
MONTH,
CUSTOMERCLASS
) %>%
summarize(
TOTALKBTU = sum(TOTALKBTU, na.rm = T)
) %>%
mutate(
DATE =
paste(
YEAR,
MONTH,
"01",
sep="-"
) %>% as.Date()
)
setwd("~/Desktop/GitHub/kflorsheim.github.io/Homework 1 Gas & Electric/Homework1")
pge_data <-
pge_data_raw %>%
filter(
CUSTOMERCLASS %in% c("Elec- Residential","Gas- Residential","Elec- Commercial","Gas- Commercial")
) %>%
group_by(
YEAR,
MONTH,
CUSTOMERCLASS
) %>%
summarize(
TOTALKBTU = sum(TOTALKBTU, na.rm = T)
) %>%
mutate(
DATE =
paste(
YEAR,
MONTH,
"01",
sep="-"
) %>% as.Date()
)
#line gragh
pge_data %>%
filter(CUSTOMERCLASS %in% c("Elec- Commercial","Gas- Commercial")) %>%
ggplot() +
geom_line(
aes(
x = DATE,
y = TOTALKBTU,
color = CUSTOMERCLASS
),
stat = "identity",
position = "stack"
) +
labs(
x = "Date",
y = "kBTU",
title = "PG&E Commercial Yearly Electricity & Gas Usage 2017-2021",
color = "Energy Type"
)
knitr::opts_chunk$set(echo = F, warning = F, message = F)
library(tidyverse)
library(sf)
library(tigris)
library(mapview)
library(leaflet)
library(censusapi)
Sys.setenv(CENSUS_KEY="9fbd5ddd430b595b8f3715733cae2b75c18be92e")
dec_vars_2020 <-
listCensusMetadata(
name = "2020/dec/pl",
type = "variables"
)
nc_pop_2020 <-
getCensus(
name = "dec/pl",
vintage = 2020,
region = "block:*",
regionin = "state:06+county:055",
vars = "P1_001N"
) %>%
transmute(
GEOID20 = paste0(state,county,tract,block),
pop_2020 = P1_001N
)
blocks_2020 <- blocks("CA", "Napa County", year = 2020, progress_bar = F)
dec_vars_2020 <-
listCensusMetadata(
name = "2020/dec/pl",
type = "variables"
)
nc_pop_2020 <-
getCensus(
name = "dec/pl",
vintage = 2020,
region = "block:*",
regionin = "state:06+county:055",
vars = "P1_001N"
) %>%
transmute(
GEOID20 = paste0(state,county,tract,block),
pop_2020 = P1_001N
)
blocks_2020 <- blocks("CA", "Napa County", year = 2020, progress_bar = F)
